// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using PruebaMarktAPI.Models;

namespace PruebaMarktAPI.Data;

public partial class pruebamarktContext : DbContext
{
    public pruebamarktContext()
    {
    }

    public pruebamarktContext(DbContextOptions<pruebamarktContext> options)
        : base(options)
    {
    }

    public virtual DbSet<categoria> categorias { get; set; }

    public virtual DbSet<producto> productos { get; set; }

    public virtual DbSet<venta> ventas { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<categoria>().ToTable(x => x.ExcludeFromMigrations());
        modelBuilder.Entity<producto>().ToTable(x => x.ExcludeFromMigrations());
        modelBuilder.Entity<venta>().ToTable(x => x.ExcludeFromMigrations());


        modelBuilder
            .UseCollation("utf8mb4_general_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<categoria>(entity =>
        {
            entity.HasKey(e => e.idcategorias).HasName("PRIMARY");

            entity.Property(e => e.idcategorias).ValueGeneratedNever();
        });

        modelBuilder.Entity<producto>(entity =>
        {
            entity.HasKey(e => e.idproductos).HasName("PRIMARY");

            entity.Property(e => e.idproductos).ValueGeneratedNever();

            entity.HasOne(d => d.idcategoriaNavigation).WithMany(p => p.productos)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk-idcategorias");
        });

        modelBuilder.Entity<venta>(entity =>
        {
            entity.HasKey(e => e.idventas).HasName("PRIMARY");

            entity.Property(e => e.idventas).ValueGeneratedNever();

            entity.HasOne(d => d.idproductoNavigation).WithMany(p => p.venta).HasConstraintName("fk-idproducto");
        });
        //Seeding
        modelBuilder.Entity<categoria>().HasData(
            new categoria
            {
                idcategorias = 1,
                nombre = "Smartphones"
            },
            new categoria
            {
                idcategorias=2,
                nombre="Portátiles"
            },
            new categoria
            {
                idcategorias=3,
                nombre="televisores"
            }
            );

        modelBuilder.Entity<producto>().HasData(
            new producto
            {
                idproductos = 1,
                nombre="iPhone13",
                descripcion="Movilazo",
                valoracion = 4,
                idcategoria =1 
            },
            new producto
            {
                idproductos = 2,
                nombre = "iPhone14",
                descripcion = "Movilazo",
                valoracion = 4,
                idcategoria = 1
            },
            new producto
            {
                idproductos = 3,
                nombre = "HiSense",
                descripcion = "Tele 32º.....",
                valoracion = 2,
                idcategoria = 3
            },
            new producto
            {
                idproductos = 4,
                nombre = "Mac Book",
                descripcion = "12GB RAM 256GB",
                valoracion = 5,
                idcategoria = 2
            }
            );
        modelBuilder.Entity<venta>().HasData(
            new venta
            {
                idventas = 1,
                idproducto=1,
                cantidad=8,
                nombreuser="paco@gmail.com"
            },
            new venta
            {
                idventas = 2,
                idproducto = 4,
                cantidad = 2,
                nombreuser = "rosa@gmail.com"
            },
            new venta
            {
                idventas = 3,
                idproducto = 3,
                cantidad = 10,
                nombreuser = "empresasTV@gmail.com"
            }
            );


        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}